## Git 브랜치 관리 및 커밋 방법 안내

### **1. 브랜치 구조와 역할**

#### **1) 브랜치 역할**

- **`main`**:
  - 배포 가능한 안정적인 상태의 코드만 존재.
  - 최종 릴리즈 단계에서만 병합 가능.
- **`develop`**:
  - 개발 중인 브랜치를 병합하는 기본 브랜치.
  - 모든 기능 개발 완료 후, `develop` 브랜치를 `main`에 병합.
- **`feature/feature_joonwoo595`**, **`feature/feature_jungeun-am`**, **`feature/feature_kumugu`**:
  - 각 팀원이 담당하는 기능 개발 브랜치.
  - 작업 완료 후, PR(Pull Request)을 통해 `develop` 브랜치로 병합.

------

### **2. 브랜치 관리 규칙**

1. **브랜치 생성 및 작업**

   - 각자 자신의 **`feature`** 브랜치에서 작업.

   - 새로운 작업이 필요하면 

     `feature/<작업명>`

      형태로 브랜치 생성.

     ``` bash
          git checkout -b feature/<작업명>
     ```

2. **작업 내용 병합**

   - 작업 완료 후, `develop` 브랜치로 병합 요청(Pull Request).
   - 병합 전, **반드시 `develop` 브랜치에서 최신 상태를 가져와 충돌 여부 확인.**

3. **코드 리뷰**

   - PR 제출 후, 팀장(또는 팀원)이 리뷰 후 병합 승인.

4. **`main` 브랜치 병합**

   - `main` 브랜치에는 테스트를 완료한 안정된 코드만 병합.
   - 병합 전, 팀장이 최종 검토.

------

### **3. 커밋 메시지 작성 규칙**

#### **1) 커밋 메시지 규칙**

- 형식
  ```php
  <타입>: <제목>
  
  <본문>
  ```

#### **2) 커밋 타입**

- **`feat`**: 새로운 기능 추가
- **`fix`**: 버그 수정
- **`docs`**: 문서 작업 관련
- **`style`**: 코드 스타일 변경 (기능 변화 없음)
- **`refactor`**: 코드 리팩토링
- **`test`**: 테스트 코드 추가 또는 수정
- **`chore`**: 기타 작업

#### **3) 커밋 예시**

- 새로운 기능 추가 시:

  ```
  makefile코드 복사feat: 직원 등록 기능 추가
  
  직원 등록 화면과 데이터베이스 연동 로직 추가.
  ```

- 버그 수정 시:

  ```
  makefile코드 복사fix: 로그인 시 비밀번호 검증 오류 해결
  
  bcrypt 모듈에서 잘못된 해시 비교 문제 수정.
  ```

------

### **4. Git 명령어 가이드**

#### **1) 작업 시작 전**

- 원격 저장소에서 최신 상태 가져오기:

  ```bash
  git pull origin develop
  ```

#### **2) 작업 후 커밋**

1. 변경된 파일 추가:

   ```bash
   git add .
   ```

2. 커밋 작성:

   ```bash
   git commit -m "커밋 메시지"
   ```

3. 자신의 브랜치에 푸시:

   ```bash
   git push origin <브랜치명>
   ```

#### **3) 병합 요청(PR)**

- GitHub에서 자신의 브랜치를 `develop`으로 병합 요청(Pull Request).

#### **4) 충돌 해결**

- ```develop ```최신 코드 가져오기:
  ```bash
  git pull origin develop
  ```

- 충돌 파일 수정 후 커밋:
  ```bash
  git add .
  git commit -m "충돌 해결 메시지"
  ```

- 병합 요청 다시 진행.

------

### **5. 브랜치 및 작업 관리 주의사항**

1. **브랜치 명명 규칙 준수**
   - 모든 브랜치는 **`feature/<작업명>`** 형태로 생성.
2. **작업 단위 분리**
   - 하나의 커밋에는 하나의 작업 내용만 포함.
3. **정기적인 푸시**
   - 작업 중간마다 변경사항을 정기적으로 푸시하여 작업 이력을 유지.
4. **PR 리뷰 준수**
   - 팀원 간 상호 리뷰를 통해 코드 품질 유지.
